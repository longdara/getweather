{"version":3,"sources":["app_component/weather.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","weatherIcon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","description","Form","error","role","onSubmit","loadweather","type","name","autoComplete","placeholder","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7b1b6a11.chunk.js","sourcesContent":["import React from 'react';\n\nconst Weather= (props) => {\n    return(\n       <div className=\"container text-light\">\n          <div className=\"cards pt-4\">\n   \n    <h1>{props.city}</h1>\n            \n            <h5 className=\"py-4\">\n                <i className={`wi ${props.weatherIcon} display-1`}> </i>\n            </h5>\n            \n            {props.temp_celsius ? (\n                <h1 className=\"py-2\">{props.temp_celsius}&deg;</h1>\n            ):null}\n            \n            \n            {/* ** show max and min temp */}\n            {minmaxTemp(props.temp_min, props.temp_max)}\n            <h4 className=\"py-3\">{props.description}</h4>\n       </div>\n       </div>\n    )\n}\n\nfunction minmaxTemp(min, max){\n    if(min && max){\n        return(\n            <h3>\n        <span className=\"px-4\">{min}&deg; </span>\n        <span className=\"px-4\">{max}&deg; </span>\n        </h3>\n        )\n    }\n\n  \n}\n\nexport default Weather;","import React from 'react';\nimport \"./form.style.css\";\nconst Form = props => {\n    return (\n        <div className=\"container\">\n            <div>{props.error ? error():null}</div>\n        <form onSubmit={props.loadweather}>\n        <div className=\"row\">\n        <div className=\"col-md-3 offset-md-2\"> \n        <input type=\"text\" \n        className=\"form-control\" \n        name=\"city\" \n        autoComplete=\"off\"\n        placeholder=\"City\"\n        />\n        \n        </div>\n        <div className=\"col-md-3\">\n        <input type=\"text\"\n         className=\"form-control\"\n          name=\"country\" \n          autoComplete=\"off\"\n          placeholder=\"Country\"\n          />     \n        </div>\n        <div className=\"col-md-3 mt-0 py-2 text-md-left\"> \n        <button className=\"btn btn-warnig\" >Get Weather</button>\n        </div>\n        </div>\n\n\n\n        </form>\n        </div>\n\n    )\n}\nfunction error(){\n    return (\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            Please Enter City and Country\n        </div>\n    )\n}\nexport default Form;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport 'weather-icons/css/weather-icons.css'\nimport './App.css';\nimport Weather from './app_component/weather.component';\nimport Form from './app_component/form.component';\n\n// API call api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_key = \"b76f3088def6659ad86b2774e8b214bf\";\n\nclass App extends React.Component {\n constructor(){\n   super();\n   this.state = {\n     city: undefined,\n     country: undefined,\n     icon: undefined,\n     main: undefined,\n     celsius: undefined,\n     temp_max: undefined,\n     temp_min: undefined,\n     description: \"\",\n     error: false\n   };\n   \n\n   this.weatherIcon= {\n     Thunderstorm: \"wi-thunderstorm\",\n     Drizzle: \"we-sleet\",\n     Rain: \"wi-storm-showers\",\n     Snow: \"wi-snow\",\n     Atmosphere: \"we-fog\",\n     Clear: \"wi-day-sunny\",\n     Clouds: \"wi-day-fog\",\n\n\n   }\n\n\n }\n\n calCelsius(temp){\n   let cell= Math.floor(temp - 273.15);\n   return cell;\n }\n\n get_WeatherIcon(icons, rangeId){\n   switch(true){\n     case rangeId >= 200 && rangeId <= 232:\n       this.setState({icon: this.weatherIcon.Thunderstorm});\n       break;\n     case rangeId >= 300 && rangeId <= 321:\n        this.setState({icon: this.weatherIcon.Drizzle });\n        break;\n     case rangeId >= 500 && rangeId <= 531:\n          this.setState({icon: this.weatherIcon.Rain });\n          break;\n     case rangeId >= 600 && rangeId <= 622:\n            this.setState({icon: this.weatherIcon.Snow});\n            break;\n     case rangeId >= 701 && rangeId <= 781:\n              this.setState({icon: this.weatherIcon.Atmosphere });\n              break;\n     case rangeId === 800:\n                this.setState({icon: this.weatherIcon.Clear });\n                break;\n     case rangeId >= 801 && rangeId <=804:\n                  this.setState({icon: this.weatherIcon.Clouds });\n                  break;\n      default:\n        this.setState({icon: this.weatherIcon.Clouds})\n      \n    \n  \n\n   }\n }\n\n\n\n\n getWeather = async(e) => {\n\n  e.preventDefault();\n\n  const city = e.target.elements.city.value;\n  const country = e.target.elements.country.value;\n\n  if(city && country){\n    const api_call = await fetch(\n   `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`)\n   const response = await api_call.json();\n   console.log(response);\n   \n   this.setState({\n     city: `${response.name}, ${response.sys.country}`,\n     country:response.sys.country,\n     celsius: this.calCelsius(response.main.temp),\n     temp_max: this.calCelsius(response.main.temp_max),\n     temp_min: this.calCelsius(response.main.temp_min),\n     description: response.weather[0].description,\n     error:false\n    \n   })\n   this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n  } else {\n    this.setState({error:true})\n  }\n   \n\n }\n  render() {\n    return(\n      <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error}/>\n      <Weather \n      city={this.state.city} \n      country={this.state.country} \n      temp_celsius={this.state.celsius} \n      temp_max={this.state.temp_max}\n      temp_min={this.state.temp_min}\n      description={this.state.description}\n      weatherIcon={this.state.icon}\n\n      />\n      </div>\n\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}